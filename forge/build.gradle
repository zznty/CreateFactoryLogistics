plugins {
    id 'me.modmuss50.mod-publish-plugin' version '0.8.+'
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0")
    include implementation("io.github.llamalad7:mixinextras-${forge_flavour}:0.5.0")

    implementation(project(path: ":create_factory_abstractions-${minecraft_version}", configuration: 'namedElements')) { transitive false }
    include project(":create_factory_abstractions-${minecraft_version}")

    modLocalRuntime "curse.maven:create-vibrant-vaults-1251719:6463890"
//    modLocalRuntime "curse.maven:create-enchantment-industry-688768:6549319"
    modLocalRuntime "curse.maven:create-extra-gauges-1263228:6916170"
//    modLocalRuntime "curse.maven:create-dragon-minus-1216624:6552025"
//    modLocalRuntime "net.liukrast:extra_gauges-${minecraft_version}:1.1.1", {
//        transitive = false
//    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range, forge_flavour: forge_flavour,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
            mod_authors: mod_authors, mod_description: mod_description,
            create_version: create_version_requirement
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    if (forge_flavour != 'forge') {
        rename 'mods\\.toml', "${forge_flavour}.mods.toml"
    }
}

publishMods {
    file = remapJar.archiveFile
//    changelog = rootProject.layout.projectDirectory.file('CHANGELOG.md').asFile.text
    changelog = ''
    type = BETA
    displayName = "$mod_name $project.version"
    modLoaders.add(forge_flavour)

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "1218807"
        minecraftVersions.add(minecraft_version)
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "QMGO17gm"
        minecraftVersions.add(minecraft_version)
    }

    dryRun = providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null
}
