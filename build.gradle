plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
}

allprojects {
    group = rootProject.mod_group_id
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
println "Version: ${version}"

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'maven-publish'

    repositories {
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven { url = "https://maven.neoforged.net/releases/" }
        maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
        maven { url = "https://mvn.devos.one/snapshots" } // Registrate
        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
        maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods
        maven { url = "https://maven.liukrast.net/" } // extra gauges
        mavenCentral()
    }

    loom {
        silentMojangMappingsLicense()

        runs {
            configureEach {
//            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            }
            data {
                data()
                programArgs '--all', '--mod', project.name
                programArgs '--output', project.layout.projectDirectory.file("src/generated/resources/").asFile.absolutePath
                programArgs '--existing', project.layout.projectDirectory.file('src/main/resources/').asFile.absolutePath
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${minecraft_version}:${mapping_version}@zip")
        }
        neoForge "${forge_group_id}:${forge_flavour}:${forge_version}"

        modCompileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
        modCompileOnly "mezz.jei:jei-${minecraft_version}-${forge_flavour}-api:${jei_version}"
        modCompileOnly "mezz.jei:jei-${minecraft_version}-${forge_flavour}:${jei_version}"
        modRuntimeOnly "mezz.jei:jei-${minecraft_version}-${forge_flavour}:${jei_version}"

        modImplementation "com.simibubi.create:create-${minecraft_version}:${create_version}:slim", { transitive = false }
        modImplementation "net.createmod.ponder:Ponder-${forge_flavour_pascal}-${minecraft_version}:${ponder_version}"
        modCompileOnly "dev.engine-room.flywheel:flywheel-${forge_flavour}-api-${minecraft_version}:${flywheel_version}"
        modRuntimeOnly "dev.engine-room.flywheel:flywheel-${forge_flavour}-${minecraft_version}:${flywheel_version}"
        modImplementation "com.tterrag.registrate:Registrate:${registrate_version}"
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    tasks.named('jar', Jar).configure {
        manifest {
            attributes([
                    'Specification-Title'     : project.mod_id,
                    'Specification-Vendor'    : mod_authors,
                    'Specification-Version'   : '1', // We are version 1 of ourselves
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_authors,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {
            maven {
                name = "zzntyMaven"
                url = "s3://dl.zznty.ru/maven"
                credentials(AwsCredentials) {
                    accessKey = providers.environmentVariable('S3_KEY_ID').getOrNull()
                    secretKey = providers.environmentVariable('S3_KEY').getOrNull()
                }
            }
        }
    }
}
